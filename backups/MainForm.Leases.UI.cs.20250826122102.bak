// MainForm.Leases.UI.cs
using System;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Collections.Generic;

namespace DhcpWmiViewer
{
    public partial class MainForm : Form
    {
        private void EnsureLeasesColumns()
        {
            try
            {
                if (dgvLeases == null) return;
                dgvLeases.Columns.Clear();

                void AddCol(string propName, string header, int width = 120)
                {
                    var c = new DataGridViewTextBoxColumn
                    {
                        DataPropertyName = propName,
                        Name = "Col_" + propName, // einheitlich: sichtbarer Column-Name mit Prefix
                        HeaderText = header,
                        AutoSizeMode = DataGridViewAutoSizeColumnMode.None,
                        Width = width
                    };
                    dgvLeases.Columns.Add(c);
                }

                AddCol("IPAddress", "IPAddress", 120);
                AddCol("ClientId", "ClientId", 200);
                AddCol("ClientType", "ClientType", 100);
                AddCol("HostName", "HostName", 160);
                AddCol("Description", "Beschreibung", 200);
                AddCol("AddressState", "AddressState", 100);
                AddCol("LeaseExpiryTime", "LeaseExpiryTime", 160);
                AddCol("ScopeId", "ScopeId", 140);
                AddCol("ServerIP", "ServerIP", 140);
                AddCol("PSComputerName", "PSComputerName", 140);
                AddCol("CimClass", "CimClass", 120);
                AddCol("CimInstanceProperties", "CimInstanceProperties", 200);
                AddCol("CimSystemProperties", "CimSystemProperties", 200);
            }
            catch
            {
                if (dgvLeases != null) dgvLeases.AutoGenerateColumns = true;
            }
        }

        private void AdjustLeasesColumnWidths()
        {
            if (dgvLeases == null || dgvLeases.Columns.Count == 0) return;
            if (dgvLeases.IsDisposed || dgvLeases.Disposing) return;

            dgvLeases.SuspendLayout();
            try
            {
                const int compactWidth = 80;
                const int extraPadding = 18;
                const int maxColumnWidth = 1200;
                const int minColumnWidth = 40;

                var preferredWidths = new int[dgvLeases.Columns.Count];

                for (int i = 0; i < dgvLeases.Columns.Count; i++)
                {
                    try
                    {
                        var col = dgvLeases.Columns[i];
                        col.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
                        try { dgvLeases.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.AllCells); } catch { }
                        int pref = col.Width;
                        try { pref = col.GetPreferredWidth(DataGridViewAutoSizeColumnMode.AllCells, true); } catch { }
                        preferredWidths[i] = Math.Min(maxColumnWidth, Math.Max(minColumnWidth, pref + extraPadding));
                    }
                    catch { preferredWidths[i] = compactWidth; }
                }

                dgvLeases.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
                int totalPreferred = 0;
                for (int i = 0; i < dgvLeases.Columns.Count; i++)
                {
                    var col = dgvLeases.Columns[i];
                    col.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
                    col.Width = preferredWidths[i];
                    col.MinimumWidth = minColumnWidth;
                    totalPreferred += col.Width;
                }

                int displayWidth = Math.Max(0, dgvLeases.ClientSize.Width - SystemInformation.VerticalScrollBarWidth);
                if (displayWidth <= 0) displayWidth = Math.Max(displayWidth, this.ClientSize.Width - SystemInformation.VerticalScrollBarWidth);

                if (totalPreferred < displayWidth)
                {
                    int extra = displayWidth - totalPreferred;
                    if (extra > 0)
                    {
                        int targetIdx = dgvLeases.Columns.Count - 1;
                        if (targetIdx >= 0)
                        {
                            var target = dgvLeases.Columns[targetIdx];
                            int newWidth = Math.Min(maxColumnWidth, target.Width + extra);
                            target.Width = newWidth;
                        }
                    }
                }

                int totalWidth = dgvLeases.Columns.Cast<DataGridViewColumn>().Sum(cc => cc.Width);
                dgvLeases.ScrollBars = (totalWidth > displayWidth) ? ScrollBars.Both : ScrollBars.Vertical;

                dgvLeases.Refresh();
                dgvLeases.PerformLayout();
            }
            finally
            {
                dgvLeases.ResumeLayout(true);
            }
        }

        private void FormatServerIpCellsAfterBind()
        {
            if (dgvLeases == null || dgvLeases.Columns.Count == 0) return;
            if (!dgvLeases.Columns.Contains("Col_ServerIP") && !dgvLeases.Columns.Contains("ServerIP")) return;

            foreach (DataGridViewRow row in dgvLeases.Rows)
            {
                try
                {
                    if (row.IsNewRow) continue;
                    DataGridViewCell? cell = null;
                    if (dgvLeases.Columns.Contains("Col_ServerIP")) cell = row.Cells["Col_ServerIP"];
                    else if (dgvLeases.Columns.Contains("ServerIP")) cell = row.Cells["ServerIP"];
                    if (cell == null) continue;
                    var val = (cell.Value?.ToString() ?? "").Trim();

                    bool isMask = string.IsNullOrEmpty(val)
                        || val.Equals("255.0.0.0", StringComparison.OrdinalIgnoreCase)
                        || val.Equals("255.255.0.0", StringComparison.OrdinalIgnoreCase)
                        || val.Equals("255.255.255.0", StringComparison.OrdinalIgnoreCase)
                        || val.Equals("255.255.255.255", StringComparison.OrdinalIgnoreCase)
                        || val.Equals("0.0.0.0", StringComparison.OrdinalIgnoreCase);

                    if (isMask)
                    {
                        cell.Value = "-";
                        cell.Style.ForeColor = Color.Gray;
                        cell.Style.Font = new Font(dgvLeases.Font, FontStyle.Italic);
                    }
                    else
                    {
                        cell.Style.ForeColor = dgvLeases.ForeColor;
                        cell.Style.Font = dgvLeases.Font;
                    }
                }
                catch { }
            }
        }

        private void DgvLeases_CellFormatting(object? sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {
                if (dgvLeases == null || e.ColumnIndex < 0) return;
                var col = dgvLeases.Columns[e.ColumnIndex];
                if (col == null) return;

                if (!string.Equals(col.Name, "Col_ServerIP", StringComparison.OrdinalIgnoreCase) &&
                    !string.Equals(col.Name, "ServerIP", StringComparison.OrdinalIgnoreCase)) return;

                var raw = e.Value?.ToString() ?? string.Empty;
                raw = raw.Trim();

                if (string.IsNullOrEmpty(raw)
                    || raw.Equals("255.0.0.0", StringComparison.OrdinalIgnoreCase)
                    || raw.Equals("255.255.0.0", StringComparison.OrdinalIgnoreCase)
                    || raw.Equals("255.255.255.0", StringComparison.OrdinalIgnoreCase)
                    || raw.Equals("255.255.255.255", StringComparison.OrdinalIgnoreCase)
                    || raw.Equals("0.0.0.0", StringComparison.OrdinalIgnoreCase))
                {
                    e.Value = "-";
                    e.CellStyle.ForeColor = Color.Gray;
                    e.CellStyle.Font = new Font(dgvLeases.Font, FontStyle.Italic);
                    e.FormattingApplied = true;
                }
                else
                {
                    e.CellStyle.ForeColor = dgvLeases.ForeColor;
                    e.CellStyle.Font = dgvLeases.Font;
                }
            }
            catch { }
        }

        private void ShowLeasesDebugWindow()
        {
            var dlg = new Form
            {
                Text = "Leases Columns Debug",
                StartPosition = FormStartPosition.CenterParent,
                Size = new Size(900, 460),
                Font = this.Font
            };

            var grid = new DataGridView
            {
                Dock = DockStyle.Fill,
                ReadOnly = true,
                AllowUserToAddRows = false,
                AutoGenerateColumns = false,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect
            };

            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colIndex", HeaderText = "Index" });
            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colName", HeaderText = "Name" });
            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colHeader", HeaderText = "HeaderText" });
            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colWidth", HeaderText = "Width" });
            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colPreferred", HeaderText = "PreferredWidth(AllCells)" });
            grid.Columns.Add(new DataGridViewTextBoxColumn { Name = "colAuto", HeaderText = "AutoSizeMode" });

            var btnRefresh = new Button { Text = "Refresh", AutoSize = true, Padding = new Padding(6) };
            var btnRunAdjust = new Button { Text = "Run Adjust", AutoSize = true, Padding = new Padding(6) };
            var btnCopy = new Button { Text = "Copy", AutoSize = true, Padding = new Padding(6) };
            var pnl = new FlowLayoutPanel { Dock = DockStyle.Top, Height = 40, FlowDirection = FlowDirection.LeftToRight, Padding = new Padding(6) };
            pnl.Controls.Add(btnRefresh);
            pnl.Controls.Add(btnRunAdjust);
            pnl.Controls.Add(btnCopy);

            dlg.Controls.Add(grid);
            dlg.Controls.Add(pnl);

            void FillGrid()
            {
                grid.Rows.Clear();
                if (dgvLeases == null || dgvLeases.Columns.Count == 0)
                {
                    grid.Rows.Add("no columns", "", "", "", "", "");
                    return;
                }

                for (int i = 0; i < dgvLeases.Columns.Count; i++)
                {
                    var c = dgvLeases.Columns[i];
                    int preferred = -1;
                    try { preferred = c.GetPreferredWidth(DataGridViewAutoSizeColumnMode.AllCells, true); } catch { }
                    grid.Rows.Add(i, c.Name ?? "", c.HeaderText ?? "", c.Width, preferred, c.AutoSizeMode.ToString());
                }
            }

            btnRefresh.Click += (s, e) => FillGrid();
            btnRunAdjust.Click += (s, e) =>
            {
                try
                {
                    AdjustLeasesColumnWidths();
                    FillGrid();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(this, "AdjustLeasesColumnWidths error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            };
            btnCopy.Click += (s, e) =>
            {
                try
                {
                    var lines = grid.Rows.Cast<DataGridViewRow>()
                        .Select(r => string.Join("\t", r.Cells.Cast<DataGridViewCell>().Select(c => c.Value?.ToString() ?? "")))
                        .Where(l => !string.IsNullOrEmpty(l));
                    var all = string.Join(Environment.NewLine, lines);
                    Clipboard.SetText(all);
                    MessageBox.Show(this, "Copied to clipboard.", "Copied", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(this, "Copy failed: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            };

            FillGrid();
            dlg.ShowDialog(this);
        }
    }
}
