// ReservationLookupAdapter.cs
using System;
using System.Data;
using System.Management.Automation;
using System.Threading.Tasks;

namespace DhcpWmiViewer
{
    /// <summary>
    /// Hilfsadapter für MainForm: erstellt eine Func<string, Task<DataTable>>
    /// die der Dialog erwartet, basierend auf DhcpManager.QueryReservationsAsync.
    /// Diese Version fängt Fehler ab und liefert bei Fehlern ein leeres DataTable zurück.
    /// </summary>
    public static class ReservationLookupAdapter
    {
        /// <summary>
        /// Liefert einen Callback, der ein ScopeId entgegennimmt und DataTable mit Reservations zurückgibt.
        /// server = DHCP-Servername, getCreds = delegierte Funktion (muss PSCredential liefern).
        /// Bei Fehlern (einschließlich fehlender Credentials) wird ein leeres DataTable zurückgegeben.
        /// </summary>
        public static Func<string, Task<DataTable>> CreateLookup(string server, Func<string, PSCredential> getCreds)
        {
            return async (scopeId) =>
            {
                try
                {
                    var dt = await DhcpManager.QueryReservationsAsync(server, scopeId, getCreds).ConfigureAwait(false);
                    return dt ?? new DataTable();
                }
                catch (Exception ex)
                {
                    // Logge diagnostisch, aber liefere ein leeres DataTable zurück, damit UI nicht blockiert.
                    try { Helpers.WriteDebugLog("ReservationLookupAdapter: QueryReservationsAsync failed: " + ex); } catch { }
                    return new DataTable();
                }
            };
        }
    }
}
